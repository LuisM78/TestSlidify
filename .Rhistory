geom_line(color="Black",aes(y=X10))
scale_x_datetime(breaks="1 day",labels = date_format("%A %m/%d"))
tail(dataaggregated)
tail(dataaggregated,20)
temp <- tempfile()
download.file("http://10.105.10.121/20150130.TXT",temp)
data <- read.csv(temp,sep=",",na.string=c("NaN"),header=FALSE,col.names=1:10)
# adding another column for the time
data$datetime<-paste(data$X1,data$X2)
# formatting the time to a specific format
data$datetime<-strptime(as.character(data$datetime),format="%d/%m/%Y %H:%M:%S")
# processing the data for 1 minute
library(openair)
dataaggregated<-timeAverage(data,avg.time="1 min",statistic="mean")
dataaggregated$X7[dataaggregated$X7 == 0 & dataaggregated$X8 == 0]=NA
dataaggregated$X8[dataaggregated$X8 == 0]=NA
library(scales)
library(ggplot2)
ggplot(dataaggregated,aes(date))+geom_line(color="Red",aes(y=X7))+ylab("temperatures")+
geom_line(color="Blue",aes(y=X8)) + geom_line(color="Green",aes(y=X9))+
geom_line(color="Black",aes(y=X10))
scale_x_datetime(breaks="1 day",labels = date_format("%A %m/%d"))
temp <- tempfile()
download.file("http://10.105.10.121/20150130.TXT",temp)
data <- read.csv(temp,sep=",",na.string=c("NaN"),header=FALSE,col.names=1:10)
# adding another column for the time
data$datetime<-paste(data$X1,data$X2)
# formatting the time to a specific format
data$datetime<-strptime(as.character(data$datetime),format="%d/%m/%Y %H:%M:%S")
# processing the data for 1 minute
library(openair)
dataaggregated<-timeAverage(data,avg.time="1 min",statistic="mean")
dataaggregated$X7[dataaggregated$X7 == 0 & dataaggregated$X8 == 0]=NA
dataaggregated$X8[dataaggregated$X8 == 0]=NA
library(scales)
library(ggplot2)
ggplot(dataaggregated,aes(date))+geom_line(color="Red",aes(y=X7))+ylab("temperatures")+
geom_line(color="Blue",aes(y=X8)) + geom_line(color="Green",aes(y=X9))+
geom_line(color="Black",aes(y=X10))
scale_x_datetime(breaks="1 day",labels = date_format("%A %m/%d"))
tail(dataaggregated,30)
temp <- tempfile()
download.file("http://10.105.10.121/20150130.TXT",temp)
data <- read.csv(temp,sep=",",na.string=c("NaN"),header=FALSE,col.names=1:10)
# adding another column for the time
data$datetime<-paste(data$X1,data$X2)
# formatting the time to a specific format
data$datetime<-strptime(as.character(data$datetime),format="%d/%m/%Y %H:%M:%S")
# processing the data for 1 minute
library(openair)
dataaggregated<-timeAverage(data,avg.time="1 min",statistic="mean")
dataaggregated$X7[dataaggregated$X7 == 0 & dataaggregated$X8 == 0]=NA
dataaggregated$X8[dataaggregated$X8 == 0]=NA
library(scales)
library(ggplot2)
ggplot(dataaggregated,aes(date))+geom_line(color="Red",aes(y=X7))+ylab("temperatures")+
geom_line(color="Blue",aes(y=X8)) + geom_line(color="Green",aes(y=X9))+
geom_line(color="Black",aes(y=X10))
scale_x_datetime(breaks="1 day",labels = date_format("%A %m/%d"))
tail(dataaggregated,50)
# First we acquire de data (donloaded)
# Then we  read the total of columns
# The time column is formatted
# The data is summarized 1 minute
temp <- tempfile()
download.file("http://10.105.10.121/20150130.TXT",temp)
data <- read.csv(temp,sep=",",na.string=c("NaN"),header=FALSE,col.names=1:10)
# adding another column for the time
data$datetime<-paste(data$X1,data$X2)
# formatting the time to a specific format
data$datetime<-strptime(as.character(data$datetime),format="%d/%m/%Y %H:%M:%S")
# processing the data for 1 minute
library(openair)
dataaggregated<-timeAverage(data,avg.time="1 min",statistic="mean")
dataaggregated$X7[dataaggregated$X7 == 0 & dataaggregated$X8 == 0]=NA
dataaggregated$X8[dataaggregated$X8 == 0]=NA
library(scales)
library(ggplot2)
ggplot(dataaggregated,aes(date))+geom_line(color="Red",aes(y=X7))+ylab("temperatures")+
geom_line(color="Blue",aes(y=X8)) + geom_line(color="Green",aes(y=X9))+
geom_line(color="Black",aes(y=X10))
scale_x_datetime(breaks="1 day",labels = date_format("%A %m/%d"))
tail(dataaggregated,50)
getwd()
# First we acquire de data (donloaded)
# Then we  read the total of columns
# The time column is formatted
# The data is summarized 1 minute
temp <- tempfile()
download.file("http://10.105.10.121/20150130.TXT",temp)
data <- read.csv(temp,sep=",",na.string=c("NaN"),header=FALSE,col.names=1:10)
# adding another column for the time
data$datetime<-paste(data$X1,data$X2)
# formatting the time to a specific format
data$datetime<-strptime(as.character(data$datetime),format="%d/%m/%Y %H:%M:%S")
# processing the data for 1 minute
library(openair)
dataaggregated<-timeAverage(data,avg.time="1 min",statistic="mean")
dataaggregated$X7[dataaggregated$X7 == 0 & dataaggregated$X8 == 0]=NA
dataaggregated$X8[dataaggregated$X8 == 0]=NA
library(scales)
library(ggplot2)
ggplot(dataaggregated,aes(date))+geom_line(color="Red",aes(y=X7))+ylab("temperatures")+
geom_line(color="Blue",aes(y=X8)) + geom_line(color="Green",aes(y=X9))+
geom_line(color="Black",aes(y=X10))
scale_x_datetime(breaks="1 day",labels = date_format("%A %m/%d"))
tail(dataaggregated,50)
downloadcsv <- function(url, nastrings) {
temp <- tempfile()
download.file(url, temp)
data <- read.csv(temp, na.strings = nastrings)
unlink(temp)
return(data)
}
trainurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
train <- downloadcsv(trainurl, c("", "NA", "#DIV/0!"))
testurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
test <- downloadcsv(testurl, c("", "NA", "#DIV/0!"))
dim(train)
table(train$classe)
library(caret)
trainset <- createDataPartition(train$classe, p = 0.8, list = FALSE)
Training <- train[trainset, ]
Validation <- train[-trainset, ]
library(ggplot2)
# Check this website
# https://github.com/genijmath/Practical_machine_learning/blob/master/solution.Rmd
qplot(num_window, user_name, data = Training, color = classe)
nzvcol <- nearZeroVar(Training)
Training <- Training[, -nzvcol]
cntlength <- sapply(Training, function(x) {
sum(!(is.na(x) | x == ""))
})
nullcol <- names(cntlength[cntlength < 0.6 * length(Training$classe)])
descriptcol <- c("X", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2",
"cvtd_timestamp", "new_window", "num_window")
excludecols <- c(descriptcol, nullcol)
Training <- Training[, !names(Training) %in% excludecols]
library(randomForest)
rfModel <- randomForest(classe ~ ., data = Training, importance = TRUE, ntrees = 10)
ptraining <- predict(rfModel, Training)
print(confusionMatrix(ptraining, Training$classe))
pvalidation <- predict(rfModel, Validation)
print(confusionMatrix(pvalidation, Validation$classe))
ptest <- predict(rfModel, test)
ptest
answers <- as.vector(ptest)
pml_write_files = function(x) {
n = length(x)
for (i in 1:n) {
filename = paste0("problem_id_", i, ".txt")
write.table(x[i], file = filename, quote = FALSE, row.names = FALSE,
col.names = FALSE)
}
}
pml_write_files(answers)
Sys.wich('git')
Sys.which('git')
library(devtools)
library(slidify)
Sys.which('git')
setwd("E:/Google Drive/Data Specialization JHU/DevelopingDataProducts/Scripts/sample/project/first_deck")
publish(user="LuisM78",repo="TestSlidify")
publish(user="LuisM78",repo="TestSlidify")
publish(user="LuisM78",repo="TestSlidify")
library(slidify)
slidify("index.Rmd")
publish(user="LuisM78",repo="TestSlidify")
publish(user="LuisM78",repo="TestSlidify")
publish(user="LuisM78",repo="TestSlidify")
library(knitr)
browseURL(index.html)
ls
getwd()
browseURL(index.html)
browseURL("index.html")
publish(user="LuisM78",repo="TestSlidify")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
temp <-read.csv("\\umons.ac.be\users\531323\Desktop\Occupancy")
temp <-read.csv("\\umons.ac.be\users\531323\Desktop\Occupancy\15-02-16  14.41.03.xls")
temp <-read.csv("\\umons.ac.be\users\531323\Desktop\Occupancy\15-02-16  14.41.03.xls")
temp <-read.csv("\\umons.ac.be\users\531323\Desktop\Occupancy\15-02-16  14.41.03.xls")
temp <-read.csv("\\umons.ac.be\\users\531323\\Desktop\\Occupancy\\15-02-16  14.41.03.xls")
temp <-read.csv("\\\umons.ac.be\\users\\531323\\Desktop\\Occupancy\\15-02-16  14.41.03.xls)
temp <-read.csv("\\umons.ac.be\\users\\531323\\Desktop\\Occupancy\\15-02-16  14.41.03.xls)
)
temp <-read.csv("\\umons.ac.be\\users\\531323\\Desktop\\Occupancy\\15-02-16  14.41.03.xls")
temp <-read.csv("\\\umons.ac.be\\users\\531323\\Desktop\\Occupancy\\15-02-16  14.41.03.xls")
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls")
head(temp)
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls",ski    p=2)
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls",skip=2)
tem
temp
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls",skip=5)
temp
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls",skip=6)
temp
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls",skip=5)
temp
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls",skip=6,sep=",")
temp
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls",skip=6,sep=",",col.names=1:5)
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls",skip=6,sep=",",header=FALSE,col.names=1:5)
TEMP
temp
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls",skip=6,sep="\t",header=FALSE,col.names=1:5)
temp
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls",skip=6,sep="\t",header=FALSE,col.names=1:4)
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls",skip=6,sep="\t",header=FALSE,col.names=1:5)
temp
temp$X5
temp$X1
temp$X2
temp$X3
temp$X4
temp$X5
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls",+
skip=6,sep="\t",header=FALSE,col.names=1:5)
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls"+
,skip=6,sep="\t",header=FALSE,col.names=1:5)
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls",skip=6,sep="\t",header=FALSE,col.names=1:5)
summary(temp)
temp$X4
str(temp)
as.string(temp$X4)
strsplit(temp$X4, "/")
strsplit(temp$X4[1], "/")
temp$X4[1]
toString(temp$X4)
str(temp$X4)
temp$X4<-str(temp$X4)
temp$X4<-toString(temp$X4)
str(temp$X4)
temp$X4
temp <-read.csv("//umons.ac.be/users/531323/Desktop/Occupancy/15-02-16  14.41.03.xls",skip=6,sep="\t",header=FALSE,col.names=1:5)
summary(temp)
as.character(temp$X4)
str(temp)
temp$X4 <- as.character(temp$X4)
str(temp$X4)
strsplit(temp$X4, "/")
A<-strsplit(temp$X4, "/")
A
as.data.frame(A)
A<-strsplit(temp$X4, "/")
A
str(A)
df <- data.frame(matrix(unnlist(l),nrow=23,byrow=T))
df <- data.frame(matrix(unlist(l),nrow=23,byrow=T))
df <- data.frame(matrix(unlist(A),nrow=23,byrow=T))
df
temp
temp$date <- df$X1
temp
temp$date <- df$X1
temp$time <- df$X2
temp
temp[,-c(X4,X5)]
temp[,-c("X4","X5")]
remo <- c("X4","X5")
temp[,-remo]
remo
temp
temp[-remo,]
temp[,remo]
temp[,-remo]
temp2 <- temp[,-remo]
temp2 <- temp[,!remo]
temp2 <- subset(temp,select=-remo)
temp2 <- subset(temp,select=-c(X4,X5))
temp2
head(temp2)
y=seq(1:10)
x1=seq(1:10)
x2=seq(20:30)
x3=seq(30:40)
y
x1
x2
y=seq(1:10)
x1=seq(1:10)
x2=seq(20:29)
x3=seq(30:39)
Courier
Area <- pi*0.4^4/4
Area
pi
Area <- (pi*0.4^4)/4
Area
Area <- (pi*0.4^2)/4
Area
AverageVel <- 20.946/(Area)
AverageVel
AverageVel <- 20.946/(Area*60)
AverageVel
RelativeRough <- 0.000046/0.4
RelativeRough
RelativeRough <- 0.000046/Dh
RelativeRough
Dh <- 0.4
RelativeRough <- 0.000046/Dh
RelativeRough
Rey = AverageVel*Dh/(0.000001307)
Rey
fun <- function (x) 1/sqrt(x)=-2*log10(e/(3.7*Dh)+2.51/(Rey*sqrt(x)))
install.packages("rootSolve")
library(rootSolve)
fun <- function (x) 1/sqrt(x)=-2*log10(e/(3.7*Dh)+2.51/(Rey*sqrt(x)))
e <- 0.000046
curve(fun(x),0,8)
curve(fun(x),.1,8)
library(rootSolve)
fun <- function (x) -2*log10(e/(3.7*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
curve(fun(x),.1,8)
curve(fun(x),0,8)
curve(fun(x),-2,8)
uniroot(fun,c(0,8))$root
uniroot(fun,c(0,8))$root
frictionfactor <- uniroot(fun,c(0,8))$root
frictionfactor
hf = frictionfactor*(L/Dh)*(AverageVel^2/(2*g))
L = 10
g = 9.81
hf = frictionfactor*(L/Dh)*(AverageVel^2/(2*g))
hf
AverageVel
Dh
frictionfactor <- 0.014
hf = frictionfactor*(L/Dh)*(AverageVel^2/(2*g))
hf
frictionfactor <- uniroot(fun,c(0,8))$root
frictionfactor
Rey = AverageVel*Dh/(0.000001307)
Rey
library(rootSolve)
fun <- function (x) -2*log10(e/(3.72*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8))$root
frictionfactor
hf
Dheq = 4*(W*H)/(2*(W+H))
W = 0.6
H = 0.3
Dheq = 4*(W*H)/(2*(W+H))
Dheq
fun <- function (x) -2*log10(e/(3.72*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8))$root
frictionfactor
Rey
RelativeRough <- 0.000046/Dh
RelativeRough
AverageVel = 30/(W*H*60)
AverageVel
Rey = AverageVel*Dheq/(0.000001307)
Rey
AverageVel <- 2.778
Rey = AverageVel*Dheq/(0.000001307)
Rey
AverageVel = 30/(W*H*60)
AverageVel
#AverageVel <- 2.778
Rey = AverageVel*Dheq/(0.000001307)
Rey
fun <- function (x) -2*log10(e/(3.72*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8))$root
frictionfactor
fun <- function (x) -2*log10(e/(3.72*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
#curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8))$root
frictionfactor
hf = frictionfactor*(L/Dh)*(AverageVel^2/(2*g))
hf
frictionfactor <- uniroot(fun,c(0,8))$root
frictionfactor
e
Rey = 6355
#
Rey;
fun <- function (x) -2*log10(e/(3.72*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
#curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8))$root
frictionfactor
Rey = 6355
Dh = 9.174*10^-3
#
Rey;
fun <- function (x) -2*log10(e/(3.72*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
#curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8))$root
frictionfactor
Rey = 6355.20057
Dh = 9.174*10^-3
#
Rey;
fun <- function (x) -2*log10(e/(3.72*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
#curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8))$root
frictionfactor
Rey = 6355.20057
Dh = 9.17362*10^-3
#
Rey;
fun <- function (x) -2*log10(e/(3.72*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
#curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8))$root
frictionfactor
e
?uniroot
frictionfactor <- uniroot(fun,c(0,8),tol-.Machine$double.eps^0.25)$root
frictionfactor
frictionfactor <- uniroot(fun,c(0,8),tol=.Machine$double.eps^0.25)$root
frictionfactor
Rey = 6355.2005719
Dh = 9.17362*10^-3
e
#
Rey;
fun <- function (x) -2*log10(e/(3.72*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
#curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8),tol=.Machine$double.eps^0.25)$root
frictionfactor
frictionfactor <- uniroot(fun,c(0,8),tol=0.0001)$root
frictionfactor
frictionfactor <- uniroot(fun,c(0,8),tol=0.00001)$root
frictionfactor
frictionfactor <- uniroot(fun,c(0,8),tol=0.000001)$root
frictionfactor
fun <- function (x) -2*log10(e/(3.71*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
#curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8),tol=0.000001)$root
frictionfactor
fun <- function (x) -2*log10(e/(3.71*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
#curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8),tol=0.000001)$root
frictionfactor
Rey = AverageVel*Dheq/(0.000001307)
Rey = 6355.200571887183
Dh = 9.17362*10^-3
e
#
Rey;
fun <- function (x) -2*log10(e/(3.71*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
#curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8),tol=0.000001)$root
frictionfactor
Rey = 6355.200571887183
Dh = 9.17362*10^-3
e
#
Rey;
fun <- function (x) -2*log10(e/(3.71*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
#curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8),tol=0.000001)$root
frictionfactor
Rey;
fun <- function (x) -2*log10(e/(3.71*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
#curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8),tol=0.0000001)$root
frictionfactor
fun <- function (x) -2*log10(e/(3.71*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
#curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8),tol=0.00000001)$root
frictionfactor
Rey = 7000
Dh = 0.009
e
#
Rey;
fun <- function (x) -2*log10(e/(3.71*Dh)+2.51/(Rey*sqrt(x)))- 1/sqrt(x)
#curve(fun(x),-2,8)
frictionfactor <- uniroot(fun,c(0,8),tol=0.00000001)$root
frictionfactor
frictionfactor <- uniroot(fun,c(0,8))$root
frictionfactor
library(knitr)
